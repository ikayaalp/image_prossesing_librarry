# GitLab CI/CD Pipeline for ImageProcessingLib
# Multi-platform build and test automation

stages:
  - build
  - test
  - quality
  - package
  - deploy

variables:
  CMAKE_BUILD_TYPE: "Release"
  CMAKE_CXX_STANDARD: "17"

# Linux Build
build:linux:
  stage: build
  image: ubuntu:22.04
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq build-essential cmake libsfml-dev
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE ..
    - make -j$(nproc)
  artifacts:
    paths:
      - build/
    expire_in: 1 hour

# Windows Build
build:windows:
  stage: build
  tags:
    - windows
  before_script:
    - choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install sfml
  script:
    - mkdir build
    - cd build
    - cmake -G "Visual Studio 16 2019" -A x64 ..
    - cmake --build . --config $CMAKE_BUILD_TYPE
  artifacts:
    paths:
      - build/
    expire_in: 1 hour

# Unit Tests
test:linux:
  stage: test
  image: ubuntu:22.04
  dependencies:
    - build:linux
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq build-essential cmake libsfml-dev
  script:
    - cd build
    - ctest --output-on-failure --verbose
  coverage: '/TOTAL.*\s+(\d+%)$/'

# Code Quality
quality:cppcheck:
  stage: quality
  image: ubuntu:22.04
  script:
    - apt-get update -qq
    - apt-get install -y -qq cppcheck
    - cppcheck --enable=all --inconclusive --std=c++17 src/ include/
  allow_failure: true

quality:clang-format:
  stage: quality
  image: ubuntu:22.04
  script:
    - apt-get update -qq
    - apt-get install -y -qq clang-format
    - find src/ include/ -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
  allow_failure: true

# Package
package:linux:
  stage: package
  image: ubuntu:22.04
  dependencies:
    - build:linux
  script:
    - cd build
    - cpack
  artifacts:
    paths:
      - build/*.tar.gz
      - build/*.deb
    expire_in: 1 week

# Deploy Documentation
deploy:docs:
  stage: deploy
  image: ubuntu:22.04
  dependencies:
    - build:linux
  script:
    - apt-get update -qq
    - apt-get install -y -qq doxygen graphviz
    - cd build
    - doxygen ../Doxyfile
  artifacts:
    paths:
      - build/html/
    expire_in: 1 week
  only:
    - main
    - develop