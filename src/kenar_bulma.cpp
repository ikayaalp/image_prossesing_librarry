#include "Image.h"
#include "EdgeDetection.h"
#include "ImageViewer.h"
#include <iostream>
#include <memory>
#include <string>

using namespace ImageProcessing;

int main() {
    std::cout << "=== Sadece Kenar Bulma Programƒ± ===\n\n";
    
    // G√∂r√ºnt√º g√∂r√ºnt√ºleyici olu≈ütur
    ImageViewer viewer;
    
    // Kullanƒ±cƒ±dan dosya adƒ± al
    std::string dosya_adi;
    std::cout << "G√∂r√ºnt√º dosyasƒ± adƒ±nƒ± girin (√∂rn: resim.pgm): ";
    std::cin >> dosya_adi;
    
    // G√∂r√ºnt√ºy√º y√ºkle
    std::cout << "1. G√∂r√ºnt√º y√ºkleniyor: " << dosya_adi << "\n";
    auto my_image = Image::load(dosya_adi);
    
    if (!my_image) {
        std::cout << "   ‚ùå Dosya bulunamadƒ±! Dosya adƒ±nƒ± kontrol edin.\n";
        return 1;
    }
    
    std::cout << "   ‚úì G√∂r√ºnt√º y√ºklendi (" 
              << my_image->getWidth() << "x" << my_image->getHeight() << ")\n";
    
    // Orijinal g√∂r√ºnt√ºy√º g√∂ster
    viewer.imshow("Orijinal G√∂r√ºnt√º", *my_image);
    std::cout << "   ‚úì Orijinal g√∂r√ºnt√º g√∂sterildi\n";
    
    // KENAR BULMA
    std::cout << "\n2. Kenar tespiti yapƒ±lƒ±yor...\n";
    auto edge_filter = std::make_unique<EdgeDetection>();
    auto kenar_sonucu = edge_filter->apply(*my_image);
    
    // Kenar sonucunu g√∂ster
    viewer.imshow("Kenar Tespiti Sonucu", *kenar_sonucu);
    std::cout << "   ‚úì Kenar tespiti tamamlandƒ±\n";
    
    // Sonucu kaydet
    kenar_sonucu->save("kenar_sonucu.pgm");
    std::cout << "   ‚úì Sonu√ß 'kenar_sonucu.pgm' olarak kaydedildi\n";
    
    std::cout << "\nüéâ Kenar bulma tamamlandƒ±! Pencereleri kapatmak i√ßin herhangi bir tu≈üa basƒ±n...\n";
    
    // Kullanƒ±cƒ± giri≈üini bekle
    viewer.waitKey(0);
    
    return 0;
}